<?php
// $Id: bulk_state_notify.module,v 1.1 2009/09/09 19:36:44 jcfiala Exp $

/**
 * @file
 * Allows users to be grouped and assigned to workflow and case tracker states to remind them of any
 * pending items.
 */

/**
 * Implments hook_perm().
 */
function bulk_state_notify_perm() {
  return array('configure bulk state notify');
}

/**
 * Implements hook_menu().
 */
function bulk_state_notify_menu() {
  $items = array();

  $items['admin/settings/bulk_state_notify'] = array(
    'title' => 'Bulk State Notify Settings',
    'description' => 'Set which users are notified about pending items in which states',
    'page callback' => 'bulk_state_notify_display_groups',
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/general'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_state_notify_settings'),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group'] = array(
    'title' => 'Groups',
    'page callback' => 'bulk_state_notify_display_groups',
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/list'] = array(
    'title' => 'List',
    'page callback' => 'bulk_state_notify_display_groups',
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/add'] = array(
    'title' => 'Add Group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_state_notify_group_add'),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/%bulk_state_notify_group'] = array(
    'title callback' => 'bulk_state_notify_group_title',
    'title arguments' => array(4),
    'page callback' => 'bulk_state_notify_group_view',
    'page arguments' => array(4),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_CALLBACK,
    'weight' => 0,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/%bulk_state_notify_group/view'] = array(
    'title' => 'View Group',
    'page callback' => 'bulk_state_notify_group_view',
    'page arguments' => array(4),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/%bulk_state_notify_group/edit'] = array(
    'title' => 'Edit Group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_state_notify_group_add', 4),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/%bulk_state_notify_group/clone'] = array(
    'title' => 'Clone Group',
    'page callback' => 'bulk_state_notify_group_clone',
    'page arguments' => array(4),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/%bulk_state_notify_group/states'] = array(
    'title' => 'Edit Group States',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_state_notify_group_states', 4),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/%bulk_state_notify_group/delete'] = array(
    'title' => 'Delete Group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_state_notify_group_delete', 4),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'bulk_state_notify.admin.inc',
  );
  $items['admin/settings/bulk_state_notify/group/%bulk_state_notify_group/remove-user/%user'] = array(
    'title' => 'Remove User from Group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_state_notify_group_remove_user', 4, 6),
    'access arguments' => array('configure bulk state notify'),
    'type' => MENU_CALLBACK,
    'file' => 'bulk_state_notify.admin.inc',
  );
  return $items;
}

/**
 * This is the load function for the %bulk_state_notify_group wildcard that is used in bulk_state_notify_group_menu().
 */
function bulk_state_notify_group_load($gid) {
  if (module_exists('og')) {
    $group = db_fetch_object(db_query(
              "SELECT gid, name, IFNULL(n.title, '') as group_name, og_nid, cng.status FROM {bulk_state_notify_groups} cng LEFT JOIN {node} n ON (cng.og_nid = n.nid) WHERE gid = %d", $gid));
  }
  else {
    $group = db_fetch_object(db_query(
              "SELECT gid, name, '' as group_name, 0 AS og_nid, cng.status FROM {bulk_state_notify_groups} cng WHERE gid = %d", $gid));
  }
  if ($group->og_nid == 0 && module_exists('og')) {
    $group->group_name = t('All Groups');
  }

  $group->users = array();
  $user_result = db_query("SELECT cnug.uid, u.name FROM {bulk_state_notify_user_group} cnug INNER JOIN {users} u ON (u.uid = cnug.uid) WHERE gid = %d", $gid);
  while ($user = db_fetch_array($user_result)) {
    $group->users[] = $user;
  }

  return $group;
}

/**
 * Implements hook_cron().
 */
function bulk_state_notify_cron() {
  // Do we need to send out emails?
  $send_emails = FALSE;
  $frequency = variable_get('bulk_state_notify_frequency', 24);

  // If it's around the time for the next send, and it's been N hours since the last send, then send.
  if (((int)date('G')) % $frequency < ($frequency / 10)
      && variable_get('bulk_state_notify_last_send', 0) + ($frequency * 3600) < time()) {
    $send_emails = TRUE;
  }
  // Don't send emails out on Friday night, Saturday night.
  if ($send_emails && date('w') < 6 && date('w') > 0) {
    _bulk_state_notify_send_emails();
    variable_set('bulk_state_notify_last_send', time());
  }
}

/**
 * Function to get array of casetracker states, indexed by state id.
 */
function _bulk_state_notify_get_casetracker_states() {
  $casetracker_states = array();
  $result = db_query("SELECT csid, case_state_name FROM {casetracker_case_states} WHERE case_state_realm = 'status' ORDER BY weight");
  while ($case_state = db_fetch_array($result)) {
    $casetracker_states[$case_state['csid']] = $case_state['case_state_name'];
  }
  return $casetracker_states;
}

/**
 * Gets an array of workflows and the states in the workflows.
 *
 * $workflow_states is multidimensional array indexed first by $workflow and then by state id.
 */
function _bulk_state_notify_get_workflow_states() {
  $workflows = array();
  $workflow_states = array();

  // Get workflow states!
  $workflow_results = db_query("select w.wid, w.name, ws.sid, ws.state FROM {workflows} w INNER JOIN {workflow_states} ws ON (w.wid = ws.wid) WHERE ws.status = 1 ORDER BY w.wid, ws.status");
  $current_workflow = 0;

  while ($workflow_state = db_fetch_array($workflow_results)) {
    if ($workflow_state['wid'] != $current_workflow) {
      $workflow_states[$workflow_state['wid']] = array();
      $current_workflow = $workflow_state['wid'];
      $workflows[$workflow_state['wid']] = $workflow_state['name'];
    }
    $workflow_states[$current_workflow][$workflow_state['sid']] = $workflow_state['state'];
  }

  return array($workflows, $workflow_states);
}

/**
 * This is the function that goes out and sends out emails to people in groups.
 */
function _bulk_state_notify_send_emails() {
  $mail_count = 0;
  $group_tickets = array(); // As we have groups who need to be notified, we keep track of them here.

  // First, we need to see if there's any casetracker nodes which fall into states which we're interested in.
  $casetracker_states = _bulk_state_notify_get_casetracker_states();

  if (module_exists('og')) {
    $group_by_casetracker_result = db_query("select cns.gid, cc.nid, cc.vid, cc.case_status_id, n.title, og.nid as group_nid, og.title as group_title
                                            FROM {casetracker_case} cc
                                            INNER JOIN {bulk_state_notify_states} cns ON (cc.case_status_id = cns.state_id AND cns.module = 'casetracker' AND cns.set_id = 1 AND cns.status = 1)
                                            INNER JOIN {bulk_state_notify_groups} cng ON (cns.gid = cng.gid AND cng.status = 1)
                                            INNER JOIN {node} n ON (cc.vid = n.vid)
                                            INNER JOIN {og_ancestry} oa ON (cc.nid = oa.nid)
                                            INNER JOIN {node} og ON (oa.group_nid = og.nid)
                                            WHERE cng.og_nid = og.nid OR cng.og_nid = 0
                                            ORDER BY gid, cc.case_status_id");
  }
  else {
    $group_by_casetracker_result = db_query("select cns.gid, cc.nid, cc.vid, cc.case_status_id, n.title, 0 as group_nid, '' as group_title
                                            FROM {casetracker_case} cc
                                            INNER JOIN {bulk_state_notify_states} cns ON (cc.case_status_id = cns.state_id AND cns.module = 'casetracker' AND cns.set_id = 1 AND cns.status = 1)
                                            INNER JOIN {bulk_state_notify_groups} cng ON (cns.gid = cng.gid AND cng.status = 1)
                                            INNER JOIN {node} n ON (cc.vid = n.vid)
                                            ORDER BY gid, cc.case_status_id");
  }

  while ($group_by_casetracker = db_fetch_object($group_by_casetracker_result)) {
    if (!array_key_exists($group_by_casetracker->gid, $group_tickets)) {
      $group_tickets[$group_by_casetracker->gid] = array();
    }
    $group_tickets[$group_by_casetracker->gid][$group_by_casetracker->group_nid][] = array(
      'ticket_type' => t('Tickets'),
      'nid' => $group_by_casetracker->nid,
      'vid' => $group_by_casetracker->vid,
      'state_id' => $group_by_casetracker->case_status_id,
      'state_title' => $casetracker_states[$group_by_casetracker->case_status_id],
      'title' => $group_by_casetracker->title,
      'group_nid' => $group_by_casetracker->group_nid,
      'group_title' => $group_by_casetracker->group_title,
    );
  }

  // Get the workflows and workflow states.
  list($workflows, $workflow_states) = _bulk_state_notify_get_workflow_states();

  if (module_exists('og')) {
    $group_by_workflow_result = db_query("select cns.gid, w.nid, n.vid, ws.wid, w.sid, n.title, og.nid as group_nid, og.title as group_title, n.type as node_type
                                            FROM {workflow_node} w
                                            INNER JOIN {workflow_states} ws ON (w.sid = ws.sid)
                                            INNER JOIN {bulk_state_notify_states} cns ON (w.sid = cns.state_id AND cns.module = 'workflow' AND cns.set_id = ws.wid AND cns.status = 1)
                                            INNER JOIN {bulk_state_notify_groups} cng ON (cns.gid = cng.gid AND cng.status = 1)
                                            INNER JOIN {node} n ON (w.nid = n.nid)
                                            INNER JOIN {og_ancestry} oa ON (w.nid = oa.nid)
                                            INNER JOIN {node} og ON (oa.group_nid = og.nid)
                                            WHERE cng.og_nid = og.nid OR cng.og_nid = 0
                                            ORDER BY gid, ws.wid, ws.weight");
  }
  else {
    $group_by_workflow_result = db_query("select cns.gid, w.nid, n.vid, ws.wid, w.sid, n.title, 0 as group_nid, '' as group_title, n.type as node_type
                                            FROM {workflow_node} w
                                            INNER JOIN {workflow_states} ws ON (w.sid = ws.sid)
                                            INNER JOIN {bulk_state_notify_states} cns ON (w.sid = cns.state_id AND cns.module = 'workflow' AND cns.set_id = ws.wid AND cns.status = 1)
                                            INNER JOIN {bulk_state_notify_groups} cng ON (cns.gid = cng.gid AND cng.status = 1)
                                            INNER JOIN {node} n ON (w.nid = n.nid)
                                            ORDER BY gid, ws.wid, ws.weight");
  }

  while ($group_by_workflow = db_fetch_object($group_by_workflow_result)) {
    if (!array_key_exists($group_by_workflow->gid, $group_tickets)) {
      $group_tickets[$group_by_workflow->gid] = array();
    }
    $node_type = node_get_types('name', $group_by_workflow->node_type);
    if (strrpos($node_type, 's') + 1 < strlen($node_type)) {
      $node_type .= 's';
    }
    $group_tickets[$group_by_workflow->gid][$group_by_workflow->group_nid][] = array(
      'ticket_type' => $node_type,
      'nid' => $group_by_workflow->nid,
      'vid' => $group_by_workflow->vid,
      'state_id' => $group_by_workflow->sid,
      'state_title' => $workflows[$group_by_workflow->wid] .': '. $workflow_states[$group_by_workflow->wid][$group_by_workflow->sid],
      'title' => $group_by_workflow->title,
      'group_nid' => $group_by_workflow->group_nid,
      'group_title' => $group_by_workflow->group_title,
    );
  }

  foreach ($group_tickets as $gid => $og_groups) {
    foreach ($og_groups as $og_nid => $tickets) {
      $params['gid'] = $gid;
      $params['tickets'] = $tickets;
      $params['group_title'] = $tickets[0]['group_title'];
      $params['group_nid'] = $og_nid;
      $group_users = array();
      $account = NULL;
      $group_user_result = db_query("SELECT u.mail, u.uid FROM {bulk_state_notify_user_group} cnug INNER JOIN {users} u ON (cnug.uid = u.uid) WHERE cnug.gid = %d", $gid);
      while ($group_user = db_fetch_object($group_user_result)) {
        $group_users[] = $group_user->mail;
        if (empty($account)) {
          $account = user_load($group_user->uid);
        }
      }
      drupal_mail('bulk_state_notify', 'notice', implode(', ', $group_users), user_preferred_language($account), $params);
      $mail_count++;
    }
  }

  return $mail_count;
}

/**
 * Implements hook_mail().
 */
function bulk_state_notify_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

  $links = array();
  $current_state = 0;
  $current_state_title = '';
  $current_list = array();
  foreach ($params['tickets'] as $ticket) {
    if ($current_state > 0 && $current_state != $ticket['state_id']) {
      $links[] = theme('item_list', $current_list, t('@ticket that are %state_name', array('@ticket' => $ticket['ticket_type'], '%state_name' => $current_state_title)));
    }
    $current_state = $ticket['state_id'];
    $current_state_title = $ticket['state_title'];
    $current_list[] = t('!link', array('!link' => l($ticket['title'], 'node/'. $ticket['nid'], array('absolute' => TRUE)), '@state' => $ticket['state_title']));
  }
  if (count($current_list)) {
    $links[] = theme_item_list($current_list, t('Tickets that are @state_name', array('@state_name' => $current_state_title)));
  }
  $message['subject'] = format_plural(count($params['tickets']),
                                      variable_get('bulk_state_notify_subject_single', 'notification for @project: 1 ticket'),
                                      variable_get('bulk_state_notify_subject_plural', 'notification for @project: @count tickets'),
                          array('@project' => $params['group_title']));
  $message_base = <<<MESSAGE_BASE
<p>These are the tickets on the site which are waiting for your attention.  Although they may not need
your immediate feedback, we've found that it's a good idea to keep an eye on these items, as we don't want to lose track of
anything that's unresolved.  In addition to this list, you can visit the site !link</p>

<p>For the project @title, the following items are awaiting your feedback or response: !list</p>
MESSAGE_BASE;
  $message['body'] = t(variable_get('bulk_state_notify_body', $message_base), array('@title' => $params['group_title'],
                                            '!link' => l(t('here'), 'node/'. $params['group_nid'], array('absolute' => TRUE)),
                                            '!list' => theme('item_list', $links)));
}

/**
 * Implements hook_theme().
 */
function bulk_state_notify_theme() {
  return array(
    'bulk_state_notify_group' => array(
    'arguments' => array('group' => NULL),
    ),
  );
}

/**
 * Theme function to display details about the current group.
 */
function theme_bulk_state_notify_group($group) {
  $output = '<dl>';
  $output .= '<dt>'. t('Name') .'</dt><dd>'. check_plain($group->name) .'</dd>';
  $output .= '<dt>'. t('Project Title') .'</dt><dd>'. check_plain($group->group_name) .'</dd>';
  $output .= '<dt>'. t('Status') .'</dt><dd>'. ($group->status ? t('Active') : t('Disabled')) .'</dd>';
  $output .= '<dt>'. t('Users') .'</dt>';

  foreach ($group->users as $user) {
    $output .= '<dd>'. l($user['name'], 'user/'. $user['uid']) .' &mdash; '. l(t('Remove'), 'admin/settings/bulk_state_notify/group/'. $group->gid .'/remove-user/'. $user['uid']) .'</dd>';
  }

  $output .= '</dl>';
  return $output;
}

/**
 * This callback provides the title for viewing or editing a notification group.
 *
 * @param $group Basic group info in a stdClass.
 * @return string The page title.
 */
function bulk_state_notify_group_title($group) {
  return t('@name Notification Group', array('@name' => $group->name));
}