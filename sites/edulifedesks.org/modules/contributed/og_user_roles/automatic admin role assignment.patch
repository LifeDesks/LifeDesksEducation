# This patch file was generated by NetBeans IDE
# Following Index: paths are relative to: /Applications/MAMP/htdocs/PhpProject1/trunk/sites/edulifedesks.org/modules/contributed/og_user_roles
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: og_user_roles.pages.inc
--- og_user_roles.pages.inc Base (BASE)
+++ og_user_roles.pages.inc Locally Modified (Based On LOCAL)
@@ -111,11 +111,19 @@
       '#value' => theme('username', $account),
     );
     $account_roles = og_user_roles_get_roles_by_group($node->nid, $account->uid);
-    $form['user_roles'][$account->uid]['roles'] = array(
+/*    $form['user_roles'][$account->uid]['roles'] = array(
       '#type' => 'checkboxes',
       '#default_value' => $account_roles,
       '#options' => $roles,
       '#parents' => array('user_roles', $account->uid),
+    );*/
+    $account_roles_copy = $account_roles;
+    $ele = array_shift($account_roles_copy);
+    $form['user_roles'][$account->uid]['roles'] = array(
+      '#type' => 'radios',
+      '#default_value' => $ele,
+      '#options' => $roles,
+      '#parents' => array('user_roles', $account->uid),
     );
     // Add default roles that do not appear in the form.
     $default_roles = array();
@@ -137,18 +145,47 @@
  * Form submit handler for group user roles assignment form.
  */
 function og_user_roles_page_form_submit($form, &$form_state) {
+  $owner = array(); $remove_admin = 0;
+  $teaching_assistant_rid = db_result(db_query("SELECT rid FROM {role} WHERE name = 'teaching assistant'"));
+  $default_admin_role = variable_get('og_user_roles_default_admin_role', 0);
+  $is_admin = og_user_roles_og_admins($form);
   $gid = $form['#node']->nid;
-
-  foreach ($form_state['values']['user_roles'] as $uid => $new_roles) {
+  foreach ($form_state['values']['user_roles'] as $uid => $new_role) {
+    $user_account = user_load($uid);
     foreach ($form['#assignable_roles'] as $rid => $name) {
-      if (empty($new_roles[$rid])) {
+      if ($new_role != $rid) {
+        if(($new_role != $default_admin_role)&&(in_array($uid, $is_admin))) {
+          if($uid != $form['#node']->uid) {
+            og_save_subscription($gid, $uid, array('is_admin' => 0));
+            drupal_set_message(t('%name is no longer a <em>group administrator</em>.', array('%name' => $user_account->name)));
+            $is_admin = array_values(array_diff($is_admin,array($uid)));
+          } else {
+            $remove_admin = 1;
+            $owner['uid'] = $uid;
+            $owner['name'] = $user_account->name;
+          }
+        } else {
         og_user_roles_role_delete($gid, $uid, $rid);
       }
-      else {
+      } else {
+        if (($new_role == $default_admin_role)&&(!in_array($uid, $is_admin))) {
+          og_save_subscription($gid, $uid, array('is_admin' => 1));
+          drupal_set_message(t('%name was promoted to <em>group administrator</em>.', array('%name' => $user_account->name)));
+        } else if (($new_role == $teaching_assistant_rid)&&(!in_array($uid, $is_admin))) {
+          og_save_subscription($gid, $uid, array('is_admin' => 1));
+          drupal_set_message(t('%name was promoted to <em>group administrator</em>.', array('%name' => $user_account->name)));
+          og_user_roles_role_delete($gid, $uid, $default_admin_role);
         og_user_roles_role_add($gid, $uid, $rid);
+        } else {
+          og_user_roles_role_add($gid, $uid, $rid);
       }
     }
   }
+  }
+  if ($remove_admin) {
+    og_save_subscription($gid, $owner['uid'], array('is_admin' => 1));
+    drupal_set_message(t('%name is a <em>group owner and cannot be edited</em>.', array('%name' => $owner['name'])));
+  }
 
   drupal_set_message(t('The changes have been saved.'));
 }
@@ -157,11 +194,8 @@
  * Render the group user roles assignment form like user permissions table.
  */
 function theme_og_user_roles_page_form($form) {
-  // Retrieve admin users in an array $is_admin[]
-  $ogadmins = db_query("SELECT uid FROM og_uid WHERE is_admin = 1 and nid = %d", $form['#node']->nid);
-  while($row = db_fetch_array($ogadmins)){
-    $is_admin[] = $row['uid'];
-  }
+  // Retrieve list of group admins in an array
+  $is_admin = og_user_roles_og_admins($form);
   // Check whether the default roles are available for the group
   $default_roles = array();
   $headers = array();
@@ -176,12 +210,13 @@
   } else {
     $headers[] = array('');
   }
-  $header = array_merge($headers[0], $form['#assignable_roles'], array(t('Manage'), t('Admin')));
+  $header = array_merge($headers[0], $form['#assignable_roles'], array(t('Manage')));
 
   $rows = array();
   foreach (element_children($form['user_roles']) as $item) {
+    $admin = in_array($item, $is_admin) ? "admin" : "";
     $row = array();
-    $row[] = drupal_render($form['user_roles'][$item]['user']);
+    $row[] = drupal_render($form['user_roles'][$item]['user'])." ".$admin;
     // if default roles are available then show the values under the header 'Default roles'
     if($default_roles){
       $row[] = drupal_render($form['user_roles'][$item]['default_roles']);
@@ -199,16 +234,8 @@
 	    $token = og_get_token($form['#node']->nid);
         $row[] = t('Request: <a href="@approve">approve</a> or <a href="@deny">deny</a>.', array('@approve' => url("og/approve/".$form['#node']->nid."/".$item."/".$token, array('query' => drupal_get_destination())), '@deny' => url("og/deny/".$form['#node']->nid."/".$item."/".$token, array('query' => drupal_get_destination()))));
       }
-
-      // Show appropriate link to create or remove admin if the user is not the group owner
-      if (!in_array($item, $is_admin)) {
-        $row[] = l(t('Admin: Create'), t("og/create_admin/".$form['#node']->nid."/".$item), array('query' => drupal_get_destination(), 'title' => t('Create Admin.'), 'absolute' => TRUE));
       } else {
-        $row[] = l(t('Admin: Remove'), t("og/delete_admin/".$form['#node']->nid."/".$item), array('query' => drupal_get_destination(), 'title' => t('Remove Admin.'), 'absolute' => TRUE));
-      }
-    } else {
       $row[] = t('Group Owner');
-      $row[] = t(' ');
     }
 
     $rows[] = $row;
@@ -219,3 +246,11 @@
   return $output;
 }
 
+function og_user_roles_og_admins($form) {
+  // Retrieve admin users in an array $is_admin[]
+  $ogadmins = db_query("SELECT uid FROM og_uid WHERE is_admin = 1 and nid = %d", $form['#node']->nid);
+  while($row = db_fetch_array($ogadmins)){
+    $is_admin[] = $row['uid'];
+  }
+  return $is_admin;
+}
\ No newline at end of file
