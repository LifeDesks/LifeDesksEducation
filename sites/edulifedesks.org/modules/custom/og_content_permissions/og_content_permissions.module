<?php
// $Id$
/**
 * @file
 * Module to allow og administrators to control which fields og members have access to edit.
 */
/**
 * Implementation of hook_help().
 */
function og_content_permissions_help($path, $arg) {
  $replace = array();
  switch ($path) {
    case 'admin/help#og_content_permissions':
      $txt = 'Allows group administrators to control which content type fields their group members can edit.';
      return '<p>' . t($txt, $replace) .'</p>';
  }
}
/**
 * Implementation of hook_perm().
 */
function og_content_permissions_perm() {
  return array('administer og content permissions');
}
/**
 * Implementation of hook_menu().
 */
function og_content_permissions_menu() {
  $items['admin/og/content-permissions'] = array(
    'title' => 'Organic groups content permissions',
    'description' => 'Configure which group posts, group owners can control.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_content_permissions_settings'),
    'access arguments' => array('administer og content permissions'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'og_content_permissions.admin.inc',
    'file path' => drupal_get_path('module', 'og_content_permissions') .'/includes',
  );
  $items['node/%node/configure'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_content_permissions_configure_form', 1, 3),
    'title' => 'Content settings',
    'type' => MENU_LOCAL_TASK,
    'file' => 'og_content_permissions.pages.inc',
    'file path' => drupal_get_path('module', 'og_content_permissions') .'/includes',
    'weight' => 5, 
    'access callback' => '_configure_content_access',
    'access arguments' => array(1),
  );
  return $items;
}
/**
* Implementation of hook_views_api().
*/
function og_content_permissions_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'og_content_permissions') .'/includes',
  );
}
/**
 * Custom access function for configuring content
 */
function _configure_content_access($node) {
  if (!og_is_group_type($node->type)) return FALSE;
  if (!og_is_group_admin($node)) return FALSE;
  return TRUE;
}
/**
 * Implementation of hook_form_alter().
 */
function og_content_permissions_form_alter(&$form, $form_state, $form_id) {
  
  // If node edit form
  if (isset($form['#id']) && $form['#id'] == 'node-form') {
    // TODO: test and configure for add node forms
    // Get current group
    $group_node = og_get_group_context();
    if (!empty($group_node)) {
      $configurable_content_types = variable_get('og_content_permissions_post_types', array());
      if (in_array($form['type']['#value'], $configurable_content_types)) {
        $field_permissions = variable_get('og_content_permissions_per_group', array());
        if (!empty($field_permissions[$group_node->nid][$form['type']['#value']])) {
          foreach ($field_permissions[$group_node->nid][$form['type']['#value']] as $fieldset => $fields) {
            foreach ($fields as $field_name => $enabled) {
              $form[$field_name]['#access'] = _og_content_permissions_field_access($group_node, $enabled);
            }
          }
        }
      }
    }
  }
}
/**
 * Custom field access callback
 */
function _og_content_permissions_field_access($group, $enabled) {
  // Return TRUE for all site administrators
  // if (user_access('administer nodes')) return TRUE;
  // If current user is a group member or admin, and enabled is 0 then don't provide access
  if (og_is_group_member($group->nid, TRUE) && $enabled === 0) return FALSE;
  return TRUE;
}